name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build images
    permissions:
      contents: read
      id-token: write
      packages: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      # this fixes some caching issues in later stpes
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.6

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - run: echo "cache info? $ACTIONS_CACHE_URL $ACTIONS_RUNTIME_TOKEN"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        env:
          PUBLISH: "true"
          GIT_SHA: ${{ github.sha }}
          VERSION: ${{ github.sha }}
        run: |
          if [[ -z "$ACTIONS_CACHE_URL" ]]; then
            echo "ACTIONS_CACHE_URL is not set, skipping cache"
          else
            echo "ACTIONS_CACHE_URL is set, using cache"
            export _EXPERIMENTAL_DAGGER_CACHE_CONFIG="type=gha,mode=max,url=$ACTIONS_CACHE_URL,token=$ACTIONS_RUNTIME_TOKEN"
          fi

          pnpm i
          pnpm exec tsx ci/index.mts

  # deploy:
  #   runs-on: ubuntu-latest
  #   name: Deploy to AWS
  #   needs:
  #     - build

  #   if: github.ref == 'refs/heads/main'

  #   concurrency:
  #     group: aws

  #   environment:
  #     name: aws
  #     url: https://dbost.tv

  #   steps:
  #     - name: Deploy to AWS
  #       shell: bash
  #       run: |
  #         docker run --rm \
  #           -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
  #           -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
  #           -e AWS_DEFAULT_REGION=${{ env.AWS_DEFAULT_REGION }} \
  #           -e RUST_BACKTRACE=full \
  #           ghcr.io/alxandr/dbost/deployer:${{ github.sha }}
